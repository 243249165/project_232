{"version":3,"sources":["assets/script/model/public/NodePoolManager.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,0DAAqD;AAE7C,IAAA,+BAAO,CAAmB;AAElC,cAAc;AAEd;IAWI;QAFQ,eAAU,GAAgC,IAAI,GAAG,EAA0B,CAAC;QAGhF,EAAE,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAC;IACtC,CAAC;wBAbgB,eAAe;IAKhC,sBAAkB,2BAAQ;QAD1B,QAAQ;aACR;YACI,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,GAAG,IAAI,iBAAe,EAAE,CAAC;QACpF,CAAC;;;OAAA;IAQD;;;OAGG;IACK,qCAAW,GAAnB,UAAoB,IAAa;QAC7B,IAAI,UAAU,GAAoB,IAAI,CAAC,aAAa,CAAC,uBAAa,CAAC,CAAC;QACpE,IAAI,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE;YACvB,UAAU,CAAC,OAAO,CAAC,UAAC,SAAS;gBACzB,SAAS,CAAC,OAAO,EAAE,CAAC;YACxB,CAAC,CAAC,CAAA;SACL;IACL,CAAC;IACD;;;OAGG;IACK,qCAAW,GAAnB,UAAoB,IAAa;QAC7B,IAAI,UAAU,GAAoB,IAAI,CAAC,aAAa,CAAC,uBAAa,CAAC,CAAC;QACpE,IAAI,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE;YACvB,UAAU,CAAC,OAAO,CAAC,UAAC,SAAS;gBACzB,SAAS,CAAC,OAAO,EAAE,CAAC;YACxB,CAAC,CAAC,CAAA;SACL;IACL,CAAC;IAED;;;;OAIG;IACK,6BAAG,GAAX,UAAY,IAAY,EAAE,QAAiB;QACvC,IAAI,IAAa,CAAC;QAClB,IAAI,IAAI,EAAE;YACN,IAAI,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,IAAI,IAAI,CAAC,CAAC;YAC7C,IAAI,IAAI,EAAE;gBACN,IAAI,SAAS,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;gBAChC,IAAI,SAAS,IAAI,CAAC,EAAE;oBAChB,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC;oBACvB,IAAI,CAAC,MAAM,GAAG,SAAS,CAAC;oBACxB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;iBAC1B;aACJ;SACJ;aAAM;YACH,EAAE,CAAC,IAAI,CAAC,2BAA2B,CAAC,CAAC;SACxC;QACD,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;;;OAIG;IACI,6BAAG,GAAV,UAAW,IAAa,EAAE,QAAiB;QACvC,IAAI,IAAI,IAAI,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YAC1B,IAAI,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC;YAClD,IAAI,CAAC,IAAI,EAAE;gBACP,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;aACtD;YACD,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;gBAC3B,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAChB,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;gBAC7B,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;aAC1B;SACJ;aAAM;YACH,EAAE,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;SACtC;IACL,CAAC;IAEM,gCAAM,GAAb,UAAc,QAAgB,EAAE,QAAgB,EAAE,QAAiC;QAC/E,IAAI,QAAQ,EAAE;YACV,IAAI,SAAS,GAAG,QAAQ,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;YAC1C,IAAI,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC,SAAS,EAAE,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;YAC1D,IAAI,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;YACpC,IAAI,IAAI,EAAE;gBACN,IAAI,QAAQ,EAAE;oBACV,QAAQ,CAAC,IAAI,CAAC,CAAC;iBAClB;gBACD,OAAO;aACV;SAEJ;aAAM;YACH,EAAE,CAAC,IAAI,CAAC,4BAA4B,CAAC,CAAC;SACzC;IACL,CAAC;;IAnGgB,eAAe;QADnC,OAAO;OACa,eAAe,CAuGnC;IAAD,sBAAC;CAvGD,AAuGC,IAAA;kBAvGoB,eAAe","file":"","sourceRoot":"/","sourcesContent":["import BaseComponent from \"../../base/BaseComponent\";\n\nconst { ccclass } = cc._decorator;\n\n/** 节点池子管理器 */\n@ccclass\nexport default class NodePoolManager {\n\n    private static _instance: NodePoolManager;\n\n    /** 单例*/\n    public static get Instance(): NodePoolManager {\n        return this._instance ? this._instance : this._instance = new NodePoolManager();\n    }\n\n    private _nodePools: Map<string, Array<cc.Node>> = new Map<string, Array<cc.Node>>();\n\n    constructor() {\n        cc.log(\"created NodePoolManager\");\n    }\n\n    /**\n     * 调用节点对象上各个组件的复用方法\n     * @param node 节点\n     */\n    private invokeReuse(node: cc.Node): void {\n        let components: BaseComponent[] = node.getComponents(BaseComponent);\n        if (components.length > 0) {\n            components.forEach((component) => {\n                component.onReuse();\n            })\n        }\n    }\n    /**\n     * 调用节点对象上各个组件的收回方法\n     * @param node 节点\n     */\n    private invokeUnuse(node: cc.Node): void {\n        let components: BaseComponent[] = node.getComponents(BaseComponent);\n        if (components.length > 0) {\n            components.forEach((component) => {\n                component.onUnuse();\n            })\n        }\n    }\n\n    /**\n     * 从池子中获取一个节点对象\n     * @param name 名称\n     * @param poolName 指定池子名称，如果不指定则从总池子中获取\n     */\n    private get(name: string, poolName?: string): cc.Node {\n        let node: cc.Node;\n        if (name) {\n            let pool = this._nodePools[poolName || name];\n            if (pool) {\n                let nodeIndex = pool.length - 1;\n                if (nodeIndex >= 0) {\n                    node = pool[nodeIndex];\n                    pool.length = nodeIndex;\n                    this.invokeReuse(node);\n                }\n            }\n        } else {\n            cc.warn('--------------节点名称为空，获取异常');\n        }\n        return node;\n    }\n\n    /**\n     * 往池子中添加一个节点对象\n     * @param name 名称\n     * @param poolName 指定池子名称，如果不指定则从总池子中获取\n     */\n    public put(node: cc.Node, poolName?: string): void {\n        if (node && cc.isValid(node)) {\n            let pool = this._nodePools[poolName || node.name];\n            if (!pool) {\n                pool = this._nodePools[poolName || node.name] = [];\n            }\n            if (pool.indexOf(node) === -1) {\n                pool.push(node);\n                node.removeFromParent(false);\n                this.invokeUnuse(node);\n            }\n        } else {\n            cc.warn('--------------节点为空，添加异常');\n        }\n    }\n\n    public obtain(pathName: string, poolName: string, callback: (node: cc.Node) => void): void {\n        if (pathName) {\n            let lastIndex = pathName.lastIndexOf(\"/\");\n            let name = pathName.slice(lastIndex, pathName.length - 1);\n            let node = this.get(name, poolName);\n            if (node) {\n                if (callback) {\n                    callback(node);\n                }\n                return;\n            }\n\n        } else {\n            cc.warn('--------------预制体路径为空，获取异常');\n        }\n    }\n\n\n\n}\n"]}