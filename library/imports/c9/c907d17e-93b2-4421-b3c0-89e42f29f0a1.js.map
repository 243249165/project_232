{"version":3,"sources":["assets/script/model/public/ResManger.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import ResInfo from \"../../structure/public/ResInfo\";\nimport LogUtil from \"../../utils/LogUtil\";\n\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class ResManger {\n\n    private static _instance: ResManger;\n\n    private _resInfoMap: Map<string, ResInfo> = new Map<string, ResInfo>();// 动态加载资源Map\n    private _loadingRes: Map<string, number> = new Map<string, number>();// 正在加载资源\n\n    /**\n     * 单例\n     *\n     * @readonly\n     * @static\n     * @type {ResManger}\n     * @memberof ResManger\n     */\n    public static get Instance(): ResManger {\n        return this._instance ? this._instance : this._instance = new ResManger();\n    }\n\n    /**\n     * 加载资源\n     *\n     * @author allen\n     * @date 2020-06-08\n     * @private\n     * @param {string} url 资源路径\n     * @param {typeof cc.Asset} [type] 资源类型\n     * @param {(err: Error, resource: any) => void} [completeCanllback] 加载回调\n     * @param {boolean} [persistence] 是否标记为不释放资源\n     * @memberof ResManger\n     */\n    private _loadRes(url: string, type?: typeof cc.Asset, completeCanllback?: (err: Error, resource: any) => void, persistence?: boolean): void {\n        // 路径判空\n        if (!url) {\n            LogUtil.error('------------------------加载路径为空');\n        }\n        let info: ResInfo = this._resInfoMap[url];\n        // 从缓存中获取资源\n        if (info && info.resource && info.resource.isValid) {\n            if (completeCanllback) {\n                completeCanllback(null, info.resource)\n            }\n        } else {\n            let startTime = cc.sys.now();\n            // 移除加载过长资源\n            for (const key in this._loadingRes) {\n                if (this._loadingRes.hasOwnProperty(key)) {\n                    const time = this._loadingRes[key];\n                    if (cc.sys.now() - time >= 1000 * 10) {\n                        delete this._loadingRes[key];\n                    }\n                }\n            }\n\n            this._loadingRes[url] = startTime;\n            // 动态加载资源\n            cc.loader.loadRes(url, type, (err: Error, resource: any) => {\n                // 移除加载记录\n                delete this._loadingRes[url];\n                // 加载失败\n                if (err) {\n                    cc.error('------------------加载异常：', err);\n                } else {\n                    resource.assetUrl = url;\n                    if (!info) {\n                        info = new ResInfo();\n                    }\n                    info.resource = resource;\n                    info.type = type;\n                    info.url = url;\n\n                    // 加载资源的依赖资源uuid\n                    let depends: any[] = cc.loader.getDependsRecursively(resource);\n                    info.depends = depends;\n\n                    // 标记永不释放资源\n                    if (persistence) {\n                        info.isKeey = true;\n                    } else {\n                        info.isKeey = false;\n                    }\n                    this._resInfoMap.set(url, info);\n                }\n\n                if (completeCanllback) {\n                    completeCanllback(err, resource)\n                }\n            });\n        }\n    }\n\n}\n"]}